<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="nm_customnodes" label="Nagamochi_CustomNodes">
    <memberTool name="nm_sop_timeshift"/>
    <memberTool name="nm_sop_detailwrangle"/>
    <memberTool name="nm_sop_isolate"/>
    <memberTool name="nm_sop_colorbyattr"/>
    <memberTool name="nm_sop_computevel"/>
    <memberTool name="nm_sop_detailvop"/>
    <memberTool name="nm_stickynote"/>
    <memberTool name="nm_nul_addparm"/>
    <memberTool name="nm_sop_fetch"/>
  </toolshelf>

  <tool name="nm_sop_timeshift" label="[Custom] Time Shift Hold" icon="SOP_timeshift">
    <toolMenuContext name="network">
      <contextOpType>Sop/timeshift</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Nagamochi Presets</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

node = soptoolutils.genericTool(kwargs, 'timeshift', force_filter=True)
node.setName('timeshift_hold0', unique_name=True)

node.setUserData("descriptiveparm", 'frame')
f = node.parm('frame').evalAsFloat()
node.parm('frame').deleteAllKeyframes()
node.parm('frame').set(f)]]></script>
  </tool>

  <tool name="nm_sop_detailwrangle" label="[Custom] Detail Wrangle" icon="SOP_attribwrangle">
    <toolMenuContext name="network">
      <contextOpType>Sop/attribwrangle</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Nagamochi Presets</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

node = soptoolutils.genericTool(kwargs, 'attribwrangle', force_filter=True)
node.setName('detailwrangle', unique_name=True)


node.parm('class').set(0)]]></script>
  </tool>

  <tool name="nm_sop_computevel" label="[Custom] Compute Velocity" icon="SOP_trail">
    <toolMenuContext name="network">
      <contextOpType>Sop/trail</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Nagamochi Presets</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

# create node
node = soptoolutils.genericTool(kwargs, 'trail', force_filter=True)
node.setName('computevel1', unique_name=True)

# set parms
node.parm('result').set('velocity')
node.parm('velapproximation').set('Central Difference')

# set user data
node.setUserData("descriptiveparm", 'velapproximation')]]></script>
  </tool>

  <tool name="nm_sop_isolate" label="[Custom] isolate" icon="SOP_blast">
    <toolMenuContext name="network">
      <contextOpType>Sop/blast</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Nagamochi Presets</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

node = soptoolutils.genericTool(kwargs, 'blast', force_filter=True)
node.setName('isolate', unique_name=True)


node.parm('negate').set(1)]]></script>
  </tool>

  <tool name="nm_sop_detailvop" label="[Custom] Detail Vop" icon="SOP_attribvop">
    <toolMenuContext name="network">
      <contextOpType>Sop/attribvop</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Nagamochi Presets</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

node = soptoolutils.genericTool(kwargs, 'attribvop', force_filter=True)
node.setName('detailvop', unique_name=True)

node.parm('bindclass').set('detail')]]></script>
  </tool>

  <tool name="nm_stickynote" label="[Custom] Sticky Note" icon="BUTTONS_network_sticky">
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
      <contextNetType>CHOP</contextNetType>
      <contextNetType>ROP</contextNetType>
      <contextNetType>SHOP</contextNetType>
      <contextNetType>COP2</contextNetType>
      <contextNetType>VOP</contextNetType>
      <contextNetType>VOPNET</contextNetType>
      <contextNetType>DOP</contextNetType>
      <contextNetType>TOP</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Nagamochi Presets</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils

def build_note(scriptargs):
    type_list = ['Heading 1', 'Heading 2', 'Heading 3', 'text']
    size_list = [2, 1, .5, .25]
    init_cds = [(0.976,0.78,0.263), (0.568,0.453,0.153), (0.313,0.250,0.08), (1,0.969,0.522)]
    
    pick_type = hou.ui.selectFromList(type_list)
    if not len(pick_type):
        return None
    pick_size = size_list[pick_type[0]]
        
    pick_color = hou.ui.selectColor(initial_color=hou.Color(init_cds[pick_type[0]]))
    if pick_color is None:
        return None
        
    pick_text = hou.ui.readInput('Type anything...')
    if not len(pick_text):
        return None
        
    #print(pick_type,pick_size,pick_color,pick_text)
    
    dummy = toolutils.genericTool(scriptargs, 'null')
    dummy_pos = dummy.position()
    
    note = dummy.parent().createStickyNote()
    note.setPosition(dummy_pos)
    note.setText(pick_text[1])
    if pick_type[0] != 3: # Heading
        note.setTextColor(pick_color)
        note.setTextSize(pick_size)
        note.setDrawBackground(0)
        note.resize(hou.Vector2((10,pick_size)))
    else: # text
        note.setColor(pick_color)
    
    dummy.destroy()
    
build_note(kwargs)]]></script>
  </tool>

  <tool name="nm_nul_addparm" label="Null: Add parm" icon="SOP_null">
    <script scriptType="python"><![CDATA[import hou

# Get the currently selected nodes in Houdini
selected_nodes = hou.selectedNodes()

# Item generator script for the 'dpend_list' parameter
item_generator_script = """n = hou.pwd()
dlist = n.dependents(include_children = False)

result = []
for d in dlist: 
    if d.path()!=n.path():
      result.extend([d.path(),d.path()])
return result"""

# Add a 'dpend_list' parameter to each selected 'null' type node without an existing 'dpend_list' parameter
for node in selected_nodes:
    if node.type().name() == 'null' and not node.parm('dpend_list'):
        # Create a new StringParmTemplate for the 'dpend_list' parameter
        parm_dependent = hou.StringParmTemplate(
            'dpend_list',
            'Dependents',
            1,
            string_type=hou.stringParmType.NodeReference,
            item_generator_script=item_generator_script,
            item_generator_script_language=hou.scriptLanguage.Python,
            menu_type=hou.menuType.StringReplace,
        )
        
        # Add the new parameter to the node's parameter group
        parm_group = node.parmTemplateGroup()
        parm_group.append(parm_dependent)
        node.setParmTemplateGroup(parm_group)
]]></script>
  </tool>

  <tool name="nm_sop_colorbyattr" label="[Custom] Random color by attr" icon="SOP_color">
    <toolMenuContext name="network">
      <contextOpType>Sop/color</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Nagamochi Presets</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

# create node
node = soptoolutils.genericTool(kwargs, 'color', force_filter=True)
node.setName('__vis_attr_by_rand0', unique_name=True)
node.setColor(hou.Color((0.094, 0.39, 0.69)))


# set parms
node.parm('deleteallcolorattribs').set(1)
node.parm('colortype').set(4)

# set user data
node.setUserData("descriptiveparm", 'rampattribute')]]></script>
  </tool>

  <tool name="nm_sop_fetch" label="[Custom] send to fetch" icon="LOP_fetch">
    <toolMenuContext name="network">
      <contextOpType>Sop/null</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Nagamochi Presets</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

node = soptoolutils.genericTool(kwargs, 'null', force_filter=True)
node.setName('_SEND_TYPENAME', unique_name=True)
node.setColor(hou.Color(0,0,0))
node.setUserData('nodeshape','squared')

parm_group = node.parmTemplateGroup()

folder_main = hou.FolderParmTemplate("send_fetch", "Sender")

#Button
button_script = '''node = hou.pwd()
n_pos = node.position()
pos = n_pos - hou.Vector2(0,1)
n_name = node.name().replace('_SEND_','')

fetch = node.parent().createNode( 'object_merge', f'_FETCH_{n_name}.0' )
fetch.setPosition( pos )
fetch.setColor(hou.Color(0,0,0))
fetch.parm('objpath1').set(node.path())
'''
button_submit = hou.ButtonParmTemplate("nm_create_fetch", "Create Fetch")
#button_submit.setJoinWithNext(True)
button_submit.setScriptCallback(button_script)
button_submit.setScriptCallbackLanguage(hou.scriptLanguage.Python)
folder_main.addParmTemplate(button_submit)

parm_group.append(folder_main)
node.setParmTemplateGroup(parm_group)]]></script>
  </tool>
</shelfDocument>
