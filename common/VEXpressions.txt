#
# Attribute Wrangle
#
attribwrangle/snippet
	[Nagamochi] promote attr from same name
    if (inprimgroup(0,"inside",@primnum) == 1){
            int a = 0;
            while(1){
                int match_prim = findattribval(0, "prim", "name", s@name,a);
                string path = prim(0,"path",match_prim);
                if (path == ""){
                    a +=1;
                    }
                else{
                    s@path = path;
                    break;
                    }
                }      
        }


attribwrangle/snippet
    [Nagamochi] name_index
    string uqs[] = uniquevals(0, 'prim',' name');
    i@name_index = find(uqs, s@name);

attribwrangle/snippet
    [Nagamochi] curveu
    //run over 'prim'
    float curvelength = primintrinsic(0, 'measuredperimeter', @primnum);

    int vertices[] = primvertices(0, @primnum);
    addattrib(0,'point','curveu',0.0);
    float lengthfromfirst = 0.0;

    for(int i=1; i<len(vertices); i++)
    {
        int pt1 = vertexpoint(0,vertices[i-1]);
        int pt2 = vertexpoint(0,vertices[i]);
        vector p1 = point(0, 'P', pt1);
        vector p2 = point(0, 'P', pt2);
        lengthfromfirst += distance(p1, p2);
        float curveu = lengthfromfirst / curvelength;
        setpointattrib(0, 'curveu', pt2, curveu);
    }

attribwrangle/snippet
    [Nagamochi] pct
    //run over 'prim'
    int numPoints = primvertexcount(0,@primnum);
    int verNum    = primvertexcount(0,@primnum);
    int vertexs[] = primvertices(0,@primnum);

    addattrib(0,'point','pct',0.0);

    for(int i=1; i<len(vertexs); i++){
        int pt = vertexpoint(0,vertexs[i]);
        float v = i/(len(vertexs)-1.0);
        setpointattrib(0, 'pct', pt, v);
        }

attribwrangle/snippet
    [Nagamochi] pop emit with linear motion of uniform acceleration
    //run over 'points'
    int pid = @ptnum;
    @age = rand(pid)*@Timeinc;

    vector g = set(0,-9.8,0);
    @P += g*pow(@age,2)*0.5;
    @v += g*@age;


attribwrangle/snippet
    [Nagamochi] move packed pivot to under the pieces
    //run over 'points'
    float bounds[] = primintrinsic(0,'packedbounds',@primnum);
    vector new_pivot = set(@P.x, bounds[2], @P.z);

    @P += new_pivot-@P;
    setprimintrinsic(0,'pivot',@primnum,new_pivot,'set');

attribwrangle/snippet
    [Nagamochi] push out of volume
    float d_vol_sample;
    vector d_vol_grad;

    for ( int n=0; n<chi('iteration'); n++){
        d_vol_sample = volumesample(1,'surface',@P);
        d_vol_grad   = normalize(volumegradient(1,'surface',@P));
        
        if(d_vol_sample<=0){
            @P -= d_vol_grad * d_vol_sample;
            }
        
        }

attribwrangle/snippet
    [Nagamochi] xyzDist
    // - init parms
    int hitprim;
    vector hitprimuv;
    int ingeo_src = 1;
    int ingeo_tgt = 1;

    // - get hit info
    float d = xyzdist(ingeo_src,@P,hitprim,hitprimuv);

    // - get attrs
    vector get_v1 = vector(primuv(ingeo_tgt, 'Cd', hitprim, hitprimuv));
    //float get_f1 = float(primuv(ingeo_tgt, 'v', hitprim, hitprimuv));
    //int get_i1 = int(primuv(ingeo_tgt, 'class', hitprim, hitprimuv));

    // - output attrs
    //i@hitprim = hitprim;
    //v@hitprimuv = hitprimuv;

    //v@vv = get_v1;
    //f@ff = get_f1;
    //t@ii = get_i1;


attribwrangle/snippet
    [Nagamochi] create random float val using ramp
    float seed = chf('seed');
    float dmin = chf('destmin');
    float dmax = chf('destmax');

    int pt = @id;
    float _value;

    _value = rand(pt + seed);
    _value = chramp("ramp",_value);
    _value = fit01(_value, dmin, dmax);

    f@pscale = _value;

attribwrangle/snippet
    [Nagamochi] random orient
    vector usamplerw = rand(@ptnum);
    p@orient = sample_orientation_cone({ 1, 0, 0, 0 }, radians(180), usamplerw);

attribwrangle/snippet
    [Nagamochi] set name for instancing copy
    string class = 'prim';
    string attr = 'name';

    int num_val = nuniqueval(1,class,attr);

    int randi = fit01(chramp('ramp',rand(@ptnum+chi('seed'))),0,num_val);
    string rname = uniqueval(1, class, attr,randi);
    addattrib(0, 'point', attr, '');
    setpointattrib(0,attr,@ptnum,rname);


attribwrangle/snippet
    [Nagamochi] decayed pscale by nage
    @pscale *= chramp('nage',1.0-@nage);


attribwrangle/snippet
    [Nagamochi] get value from volume
    f@vol_density     = volumesample(1,'density',@P);
    f@vol_temperature = volumesample(1,'temperature',@P);
    f@vol_heat        = volumesample(1,'heat',@P);
    //f@vol_age         = volumesample(1,'age',@P);
    //f@vol_speed       = volumesample(1,'speed',@P);

    v@vol_vel = volumesamplev(1,'vel',@P);
    //v@vol_gradient = volumesamplev(1,'gradient',@P);
    //v@vol_rest = volumesamplev(1,'rest',@P);

attribwrangle/snippet
    [Nagamochi] set objid from dopimport
    i@objid = atoi(split(s@dopobject,':')[1]);

attribwrangle/snippet
    [Nagamochi] set match attrib for fuse
    // - get nearpoints
    string grp = sprintf('@cluster_name!=%s',s@cluster_name);
    int npts[] = nearpoints(0,grp,@P,0.00001);

    // - prepare
    append(npts,@ptnum);

    string s_npts[];
    foreach(int i; sort(npts)){
        append(s_npts,itoa(i));
        }

    // - outputs
    s@fuse_name = join(s_npts,'_');
    //i[]@npts = sort(npts);

volumewrangle/snippet
    [Nagamochi] Blend rest aand rest2
    float ratio = detail(0, "rest2_ratio", 0);
    vector dualrest = lerp(v@rest, v@rest2, ratio);
    v@dualrest = dualrest;


attribwrangle/snippet
    [Nagamochi] Point Cloud - Base
    // - options
    float maxdistance = chf('serarch_radius');
    int maxpoints = chi('number_of_points');


    // - gen attr
    int pt_index[];
    float pt_dist[];
    vector getV;


    // == POINT CLOUD ==
    int handle = pcopen(0, "P", @P, maxdistance, maxpoints);

    while( pciterate(handle) )
    {
        //pcimport(handle, "P", getV);
        
        int get_pt;
        pcimport(handle, "point.number", get_pt);
        if (get_pt == @ptnum) continue;
        append(pt_index, get_pt);
        
        float get_d;
        pcimport(handle, "point.distance", get_d);
        append(pt_dist, get_d);
    }
    pcclose(handle);


    // == EXPORT ==
    f[]@pt_dist = pt_dist;
    i[]@pt_index = pt_index;

attribwrangle/snippet
    [Nagamochi] Point Cloud - Calc PointDensity
    // - options
    float maxdistance = chf('serarch_radius');
    int maxpoints = chi('number_of_points');


    // == POINT CLOUD ==
    int handle = pcopen(0, "P", @P, maxdistance, maxpoints);
    int get_nums = pcnumfound(handle);
    pcclose(handle);


    // == EXPORT ==
    @prt_density = (get_nums-1.0)/(maxpoints-1);

    if(chi('visualize')) @Cd = chramp('color',@prt_density);

attribwrangle/snippet
    [Nagamochi] Delte namespace from @path that comes from Maya.
    string chunks[] = re_split('/', s@path);

    string fixed_chunks[];
    foreach (string chunk; chunks){
        append(fixed_chunks, re_split(':',chunk)[-1]);
        }
        
    s@path = join(fixed_chunks, '/');

